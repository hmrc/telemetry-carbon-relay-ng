instance = "${HOST}"

# Not setting this variable allows for all cpu cores to be used
# max_procs = 2

spool_dir = "/var/spool/carbon-relay-ng"

pid_file = "carbon-relay-ng.pid"

log_level = "info"

validation_level_legacy = "medium"

validate_order = false

bad_metrics_max_age = "1h"

admin_addr = "0.0.0.0:2004"
listen_addr = "0.0.0.0:2003"
pickle_addr = "0.0.0.0:2013"
http_addr   = "0.0.0.0:8081"


blocklist = [
  'prefix collectd.backup_mongodb-',
  'prefix collectd.localhost',
  'prefix tax.',
  'regex ^play\.[^.]+\.+[^.]+\.[^.]+\.compute\.internal\.ch.*',
  'regex ^play\.\$\{appName\}\.',
  'regex ^play\.email\..*\.bounces\..*\.(?:TemporaryBounce|PermanentBounce)\..*'
]

[amqp]
amqp_enabled = false

[[route]]
key = 'carbon-clickhouse'
type = 'consistentHashing'
destinations = [
  'carbon-clickhouse:2103'
]

[instrumentation]
graphite_addr = "localhost:2003"
graphite_interval = 6000  # in ms

# Rewrite carbon-relay-ng internal metrics
[[rewriter]]
old = '/^carbon-relay-ng\.([^.]+)\.(graphite-relay|clickhouse-server-shard_[0-9])-ip-([^.]+)\.(.*)/'
new = 'telemetry.metrics.carbon-relay-ng.${2}.${3}.${1}.${4}'
max = -1

# Rename postgresql metrics
[[rewriter]]
old = '/^collectd\.([^\.]+)\.postgresql-(.*)/'
new = 'rds.postgresql.${1}.${2}'
max = -1

# fix container hostnames for heritage (private zone\CIP)
[[rewriter]]
old = '/(play|portal)\.([\w|-]*)\.+([-\d]+)\.(.*)/'
new = '${1}.${2}.${3}-${4}'
max = -1

# fix container hostnames for ECS (MDTP)
[[rewriter]]
old = '/(play|portal)\.([\w|-]*)\.+ip-([^\.]+)\.eu-west-2\.compute\.internal\.(.*)/'
new = '${1}.${2}.ecs-${3}-${2}.${4}'
max = -1

# rewrite ingress-gateway metrics
# from: 'telegraf.<EC2-instanceId>.<metric-type>.envoy.ingressgateway-<ZONE_AND_SUFFIX>.<ecs-task-id>.<metric-path>[.<metric-path>]*'
# to: 'microservice.<microservice-name-and-zone>.<ecs-task-id>.<envoy>.<metric_type>.<metric-path>[.<metric-path>]*'
[[rewriter]]
old = '/^telegraf\.(?:[^\.]+)\.([^\.]+)\.envoy\.ingressgateway-(public-rate|public-monolith|protected-rate|mdtp|public|protected)[^\.]*\.([^\.]+)\.(.*)+/'
new = 'microservice.ingressgateway-${2}.${3}.envoy.${1}.${4}'
max = -1

# rewrite envoy metrics
# from: 'telegraf.<EC2-instanceId>.<metric-type>.envoy.<SERVICE_NAME_AND_ZONE>.<ecs-task-id>.<metric-path>[.<metric-path>]*'
# to: 'microservice.<microservice-name>.<ecs-task-id>.<envoy>.<metric_type>.<metric-path>[.<metric-path>]*'
[[rewriter]]
old = '/^telegraf\.(?:[^\.]+)\.([^\.]+)\.envoy\.([^\.]+)-(?:public-rate|public-monolith|protected-rate|mdtp|public|protected)[^\.]*\.([^\.]+)\.(.*)+/'
new = 'microservice.${2}.${3}.envoy.${1}.${4}'
max = -1

# rewrite fluentbit forwarder metrics
# from: 'telegraf.<EC2-instanceId>.<cluster-name>.<input_tag>.<output_plugin>.<api_endpoint>.<input_tag>.<metric-path>'
# to: 'logging.<cluster-name>.<EC2-instanceId>.<output_plugin>.<metric-path>'
[[rewriter]]
old = '/^telegraf\.([^\.]+)\.([^\.]+)\.prometheus\.([^\.]+)\.[^\.]+fluentbit-forwarder[^\.]+\.prometheus\.(.*)/'
new = 'logging.${2}.${1}.${3}.${4}'
max = -1

# rewrite telegraf/ecs-agent/fluentbit-forwarder docker input metrics.
# These are the metrics from the docker input plugin prefixed with docker-insights
# from: 'docker-insights.<EC2-instanceId>.<ECS_CLUSTER_TAG>.<TELEGRAF_TAG>.<container_image>.<container_name>.<container_status>.<container_version>.<metric-path>'
# to: 'telemetry.metrics.ecs.<cluster-name>.<EC2-instanceId>.<container_name>.<metric-path>'
[[rewriter]]
old = '/^docker-insights\.([^\.]+)\.([^\.]+)\.([^\.]+)\.([^\.]+)\.([^\.]+)\.([^\.]+)\.([^\.]+)\.(.*)/'
new = 'telemetry.metrics.ecs.${2}.${1}.${5}.${8}'
max = -1

# Max aggregation on ActiveMQ queue size
[[aggregation]]
function ='max'
regex = '^collectd\.public_monolith_activemq_[^.]+\.jmx_activemq-Queue_([^.]+)_QueueSize\.gauge-QueueSize'
format = 'aggregates."${HOST}".collectd.public_monolith_activemq.queues.$1.queue_size_max'
interval = 60
wait = 61
cache = false
